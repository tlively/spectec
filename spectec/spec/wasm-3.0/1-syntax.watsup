;;
;; Lists
;;

;; TODO: enable writing X^n
syntax list(syntax X) = X*  -- if |X*| < $(2^32)


;;
;; Values
;;

;; Integers

syntax bit hint(desc "bit") = 0 | 1
syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

syntax uN(N) hint(desc "unsigned integer") hint(show u#%) =
  0 | ... | 2^N-1
syntax sN(N) hint(desc "signed integer") hint(show s#%) =
  -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN(N) hint(desc "integer") hint(show i#%) =
  uN(N)

syntax u8 = uN(8)
syntax u16 = uN(16)
syntax u31 = uN(31)
syntax u32 = uN(32)
syntax u64 = uN(64)
syntax u128 = uN(128)
syntax s33 = sN(33)

var b : byte


;; Floating-point

def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat hint(show `M)
def $M(N) = $signif(N)

def $E(N) : nat hint(show `E)
def $E(N) = $expon(N)

syntax fN(N) hint(desc "floating-point number") hint(show f#%) =
  | POS fNmag(N)  hint(show $(+%)) \
  | NEG fNmag(N)  hint(show $(-%))

syntax fNmag(N) hint(desc "floating-point magnitude") hint(show f#%#mag) =
  | NORM m n     hint(show $((1 + %*2^(-$M(N))) * 2^%))  -- if $(m < 2^$M(N) /\ 2-2^($E(N)-1) <= n <= 2^($E(N)-1)-1)
  | SUBNORM m    hint(show $((0 + %*2^(-$M(N))) * 2^n))  -- if $(m < 2^$M(N) /\ 2-2^($E(N)-1) = n)
  | INF          hint(show infinity)
  | NAN (m)      hint(show NAN#%)                        -- if $(1 <= m < 2^$M(N))

syntax f32 = fN(32)
syntax f64 = fN(64)

def $fzero(N) : fN(N) hint(show $(+0))
def $fzero(N) = POS (SUBNORM 0)

def $fone(N) : fN(N)  hint(show $(+1))
def $fone(N) = POS (NORM 1 0)

def $canon_(N) : nat
def $canon_(N) = $(2^($signif(N)-1))


;; Vectors

syntax vN(N) hint(desc "vector") hint(show v#%) =
  iN(N)


;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

def $utf8(char*) : byte*

syntax name hint(desc "name") = char*  -- if |$utf8(char*)| < $(2^32)

var nm : name


;;
;; Indices
;;

syntax idx hint(desc "index") = u32
syntax laneidx hint(desc "lane index") = u8

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax elemidx hint(desc "elem index") = idx
syntax dataidx hint(desc "data index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx
var x33 : s33 hint(show x)


;;
;; Types
;;

;; Value types

;; TODO: inline
syntax nul = NULL?

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax consttype hint(desc "literal type") =
  | numtype | vectype

syntax absheaptype/syn hint(desc "abstract heap type") =
  | ANY | EQ | I31 | STRUCT | ARRAY | NONE
  | FUNC | NOFUNC
  | EXTERN | NOEXTERN
  | ...
syntax absheaptype/sem =
  | ... | BOT

syntax rectype hint(desc "recursive type")  ;; forward decl
syntax deftype hint(desc "defined type") =
  | DEF rectype nat hint(show %.%)

syntax typeuse/syn hint(desc "type use") =
  | _IDX typeidx | ...
syntax typeuse/sem =
  | ... | deftype | REC n

syntax heaptype hint(desc "heap type") =
  | absheaptype | typeuse

syntax reftype hint(desc "reference type") =
  | REF nul heaptype

syntax valtype/syn hint(desc "value type") =
  | numtype | vectype | reftype | ...
syntax valtype/sem =
  | ... | BOT

syntax inn hint(show I#n) = I32 | I64
syntax fnn hint(show F#n) = F32 | F64
syntax vnn hint(show V#n) = V128
syntax cnn hint(show t) = inn | fnn | vnn

syntax resulttype hint(desc "result type") =
  list(valtype)


;; Packed types

syntax packtype hint(desc "packed type") = I8 | I16
syntax lanetype hint(desc "lane type") = numtype | packtype
syntax storagetype hint(desc "storage type") = valtype | packtype

syntax pnn hint(show I#n) = I8 | I16
syntax lnn hint(show I#n) = inn | fnn | pnn
syntax imm hint(show I#n) = inn | pnn


;; Type definitions

;; TODO: inline
syntax mut = MUT?
syntax fin = FINAL?

syntax fieldtype hint(desc "field type") =
  mut storagetype

syntax functype hint(desc "function type") = resulttype -> resulttype
syntax structtype hint(desc "structure type") = list(fieldtype)
syntax arraytype hint(desc "array type") = fieldtype
syntax stacktype hint(desc "stack type") = resulttype reftype

syntax comptype hint(desc "composite type") =
  | STRUCT structtype
  | ARRAY arraytype
  | STACK stacktype
  | FUNC functype

syntax subtype/syn hint(desc "sub type") =
  | SUB fin typeuse* comptype

syntax rectype hint(desc "recursive type") =
  | REC list(subtype)


;; External types

syntax limits hint(desc "limits") =
  `[u32 .. u32]

syntax globaltype hint(desc "global type") =
  mut valtype
syntax tabletype hint(desc "table type") =
  limits reftype
syntax memtype hint(desc "memory type") =
  limits I8
syntax elemtype hint(desc "element type") =
  reftype
syntax datatype hint(desc "data type") =
  OK
syntax externtype hint(desc "external type") =
  | FUNC typeuse | GLOBAL globaltype | TABLE tabletype | MEM memtype


;; Meta variables

var lim : limits

var t : valtype
;; var bt : blocktype  ;; defined below
var ct : comptype
var dt : deftype
var ft : functype
var gt : globaltype
var ht : heaptype
;; var it : instrtype  ;; defined in typing
;; kt : conttype       ;; future extension
var lt : lanetype
var mt : memtype
var nt : numtype
var pt : packtype
var qt : rectype       ;; TODO: better choice?
var rt : reftype
var st : subtype
var tt : tabletype
var vt : vectype
var xt : externtype
var yt : fieldtype     ;; TODO: better choice?
var zt : storagetype


;;
;; Operators
;;

;; Constants

def $size(numtype) : nat       hint(show |%|)
def $isize(inn) : nat          hint(show |%|)
def $vsize(vectype) : nat      hint(show |%|)
def $psize(packtype) : nat     hint(show |%|)
def $lsize(lanetype) : nat     hint(show |%|)
def $zsize(storagetype) : nat  hint(show |%|)
def $lanetype(shape) : lanetype

;; TODO: get rid of these terrible hacks by defining $inn(nat) hint(show I#%)
def $sizenn(numtype) : nat     hint(show n)  ;; HACK!
def $sizenn1(numtype) : nat    hint(show n_1)  ;; HACK!
def $sizenn2(numtype) : nat    hint(show n_2)  ;; HACK!
def $sizenn(nt) = $size(nt)
def $sizenn1(nt) = $size(nt)
def $sizenn2(nt) = $size(nt)

def $sizemm(lanetype) : nat    hint(show n)    ;; HACK!
def $sizemm1(lanetype) : nat   hint(show n_1)  ;; HACK!
def $sizemm2(lanetype) : nat   hint(show n_2)  ;; HACK!
def $sizemm(lt) = $lsize(lt)
def $sizemm1(lt) = $lsize(lt)
def $sizemm2(lt) = $lsize(lt)

syntax num_(numtype)
syntax num_(inn) = iN($sizenn(inn))
syntax num_(fnn) = fN($sizenn(fnn))

syntax pack_(pnn) = iN($psize(pnn))

syntax lane_(lanetype)
syntax lane_(numtype) = num_(numtype)
syntax lane_(packtype) = pack_(packtype)
syntax lane_(imm) = iN($lsize(imm))  ;; HACK

syntax vec_(vnn) = vN($vsize(vnn))

;; TODO: Rename? bval? storageval\ref?
syntax zval_(storagetype)
syntax zval_(numtype) = num_(numtype)
syntax zval_(vectype) = vec_(vectype)
syntax zval_(packtype) = pack_(packtype)

def $zero(numtype) : num_(numtype)
def $zero(inn) = 0
def $zero(fnn) = $fzero($size(fnn))


;; Numeric operators

syntax sx hint(desc "signedness") = U | S

syntax unop_(numtype)
syntax unop_(inn) = CLZ | CTZ | POPCNT | EXTEND n
syntax unop_(fnn) = ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax binop_(numtype)
syntax binop_(inn) =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax binop_(fnn) =
  | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax testop_(numtype)
syntax testop_(inn) = EQZ
;; syntax testop_(fnn) = |      ;; uninhabited

syntax relop_(numtype)
syntax relop_(inn) =
  | EQ | NE \
  | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) \
  | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax relop_(fnn) =
  | EQ | NE | LT | GT | LE | GE

syntax cvtop = CONVERT | CONVERT_SAT | REINTERPRET


;; Vector operators

syntax dim hint(desc "dimension") = `1 | `2 | `4 | `8 | `16
syntax shape hint(desc "shape") = lanetype X dim  hint(show %0#X#%2)
syntax ishape hint(desc "shape") = imm X dim      hint(show %0#X#%2)
syntax fshape hint(desc "shape") = fnn X dim      hint(show %0#X#%2)
syntax pshape hint(desc "shape") = pnn X dim      hint(show %0#X#%2)

def $dim(shape) : dim
def $shsize(shape) : nat  hint(show |%|)

syntax vvunop = NOT
syntax vvbinop = AND | ANDNOT | OR | XOR
syntax vvternop = BITSELECT
syntax vvtestop = ANY_TRUE

syntax vunop_(shape)
syntax vunop_(imm X N) = ABS | NEG
  | POPCNT -- if imm = I8
syntax vunop_(fnn X N) = ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax vbinop_(shape)
syntax vbinop_(imm X N) =
  | ADD
  | SUB
  | ADD_SAT sx hint(show ADD_SAT#_#%)      -- if $sizemm(imm) <= `16
  | SUB_SAT sx hint(show SUB_SAT#_#%)      -- if $sizemm(imm) <= `16
  | MUL                                    -- if $sizemm(imm) >= `16
  | AVGR_U                                 -- if $sizemm(imm) <= `16
  | Q15MULR_SAT_S                          -- if $sizemm(imm) = `16
  | MIN sx hint(show MIN#_#%)              -- if $sizemm(imm) <= `32
  | MAX sx hint(show MAX#_#%)              -- if $sizemm(imm) <= `32
syntax vbinop_(fnn X N) = ADD | SUB | MUL | DIV | MIN | MAX | PMIN | PMAX

syntax vtestop_(shape)
syntax vtestop_(imm X N) = ALL_TRUE
;; syntax vtestop_(fnn X N) = |           ;; uninhabited

syntax vrelop_(shape)
syntax vrelop_(imm X N) = EQ | NE
  | LT sx  -- if $sizemm(imm) =/= `64 \/ sx = S
  | GT sx  -- if $sizemm(imm) =/= `64 \/ sx = S
  | LE sx  -- if $sizemm(imm) =/= `64 \/ sx = S
  | GE sx  -- if $sizemm(imm) =/= `64 \/ sx = S
syntax vrelop_(fnn X N) = EQ | NE | LT | GT | LE | GE

syntax vcvtop_(shape_1, shape_2)
syntax vcvtop_(imm_1 X N_1, imm_2 X N_2) =
  | EXTEND    -- if $sizemm2(imm_2) = $(2 * $sizemm1(imm_1))
syntax vcvtop_(imm_1 X N_1, fnn_2 X N_2) =
  | CONVERT   -- if $sizenn2(fnn_2) >= $sizemm1(imm_1) = 32
syntax vcvtop_(fnn_1 X N_1, imm_2 X N_2) =
  | TRUNC_SAT -- if $sizenn1(fnn_1) >= $sizemm2(imm_2) = 32
syntax vcvtop_(fnn_1 X N_1, fnn_2 X N_2) =
  | DEMOTE    -- if $sizenn1(fnn_1) > $sizenn2(fnn_2)
  | PROMOTE   -- if $sizenn1(fnn_1) < $sizenn2(fnn_2)

syntax half hint(desc "lane part") = LOW | HIGH

syntax half_(shape_1, shape_2) = half
  -- if $lanetype(shape_1) = imm_1 /\ $lanetype(shape_2) = imm_2
     \/ $lanetype(shape_2) = F64 /\ $lsize($lanetype(shape_1)) = 32
     ;; TODO: only allow LOW in latter case
syntax zero_(shape_1, shape_2) = ZERO
  -- if $lanetype(shape_1) = F64 /\ $lsize($lanetype(shape_2)) = 32

(;
syntax half_(shape_1, shape_2)
syntax half_(imm_1 X N_1, imm_2 X N_2) = half
syntax half_(lnn_1 X N_1, fnn_2 X N_2) = LOW  -- if $(2 * $lsize(lnn_1)) = $size(fnn_2) = 64

syntax zero_(shape_1, shape_2)
syntax zero_(fnn_1 X N_1, lnn_2 X N_2) = ZERO -- if $(2 * $lsize(lnn_2)) = $size(fnn_1) = 64
;)

syntax vshiftop_(ishape)
syntax vshiftop_(imm X N) = SHL | SHR sx

syntax vextunop_(ishape)
syntax vextunop_(imm X N) =
  | EXTADD_PAIRWISE  -- if `16 <= $sizemm(imm) <= `32
syntax vextbinop_(ishape)
syntax vextbinop_(imm X N) =
  | EXTMUL half      hint(show EXTMUL#_#%)
  | DOT              -- if $sizemm(imm) = `32


;; Memory operators

syntax memop hint(desc "memory operator") = {ALIGN u32, OFFSET u32}

syntax vloadop =
  | SHAPE nat X nat sx  hint(show %#X#%#_#%)
  | SPLAT nat           hint(show %#_#SPLAT)
  | ZERO nat            hint(show %#_#ZERO)

var mo : memop


;;
;; Instructions
;;

syntax blocktype hint(desc "block type") =
  | _RESULT valtype?
  | _IDX funcidx

var bt : blocktype

syntax instr/parametric hint(desc "parametric instruction") =
  | NOP
  | UNREACHABLE
  | DROP
  | SELECT (valtype*)?
  | ...

syntax instr/block hint(desc "block instruction") = ...
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | ...

syntax instr/br hint(desc "branch instruction") = ...
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | BR_ON_NULL labelidx
  | BR_ON_NON_NULL labelidx
  | BR_ON_CAST labelidx reftype reftype
  | BR_ON_CAST_FAIL labelidx reftype reftype
  | ...

syntax instr/call hint(desc "function instruction") = ...
  | CALL funcidx
  | CALL_REF typeuse
  | CALL_INDIRECT tableidx typeuse
  | RETURN
  | RETURN_CALL funcidx
  | RETURN_CALL_REF typeuse
  | RETURN_CALL_INDIRECT tableidx typeuse
  | ...

syntax instr/num hint(desc "numeric instruction") = ...
  | CONST numtype num_(numtype)      hint(show %.CONST %)
  | UNOP numtype unop_(numtype)      hint(show %.%)
  | BINOP numtype binop_(numtype)    hint(show %.%)
  | TESTOP numtype testop_(numtype)  hint(show %.%)
  | RELOP numtype relop_(numtype)    hint(show %.%)
  | CVTOP numtype_1 numtype_2 cvtop sx?  hint(show %1.%3#_#%2#_#%4) hint(show %1.%3#_#%2)
    -- if numtype_1 =/= numtype_2
  | EXTEND numtype n                 hint(show %.EXTEND#%#_#S)
  | ...

syntax instr/vec hint(desc "vector instruction") = ...
  | VCONST vectype vec_(vectype)        hint(show %.CONST %)
  | VVUNOP vectype vvunop               hint(show %.%)
  | VVBINOP vectype vvbinop             hint(show %.%)
  | VVTERNOP vectype vvternop           hint(show %.%)
  | VVTESTOP vectype vvtestop           hint(show %.%)
  | VUNOP shape vunop_(shape)           hint(show %.%)
  | VBINOP shape vbinop_(shape)         hint(show %.%)
  | VTESTOP shape vtestop_(shape)       hint(show %.%)
  | VRELOP shape vrelop_(shape)         hint(show %.%)
  | VSHIFTOP ishape vshiftop_(ishape)   hint(show %.%)
  | VBITMASK ishape                     hint(show %.BITMASK)
  | VSWIZZLE ishape                     hint(show %.SWIZZLE)
    -- if ishape = I8 X `16
  | VSHUFFLE ishape laneidx*            hint(show %.SHUFFLE %)
    -- if ishape = I8 X `16 /\ |laneidx*| = 16
  | VSPLAT shape                        hint(show %.SPLAT)
  | VEXTRACT_LANE shape sx? laneidx     hint(show %.EXTRACT_LANE_#% %)
    -- if $lanetype(shape) = numtype <=> sx? = eps
  | VREPLACE_LANE shape laneidx         hint(show %.REPLACE_LANE %)
  | VEXTUNOP ishape_1 ishape_2 vextunop_(ishape_1) sx
    hint(show %1.%3#_#%2#_#%4)
    -- if $($lsize($lanetype(ishape_1)) = 2*$lsize($lanetype(ishape_2)))
  | VEXTBINOP ishape_1 ishape_2 vextbinop_(ishape_1) sx
    hint(show %1.%3#_#%2#_#%4)
    -- if $($lsize($lanetype(ishape_1)) = 2*$lsize($lanetype(ishape_2)))
    ;; TODO: /\ (vextbinop =/= DOT \/ sx = S)
  | VNARROW ishape_1 ishape_2 sx        hint(show %.NARROW#_#%#_#%)
    -- if $($lsize($lanetype(ishape_2)) = 2*$lsize($lanetype(ishape_1)) <= 32)
  | VCVTOP shape_1 shape_2 vcvtop_(shape_2, shape_1) half_(shape_2, shape_1)? sx? zero_(shape_2, shape_1)?
    hint(show %1.%3#_#%4#_#%2#_#%5#_#%6)
    hint(show %1.%3#_#%4#_#%2#_#%5)   ;; TODO: this is wrong when half is present
    hint(show %1.%3#_#%2#_#%4)        ;; TODO: this is wrong when half is absent
    hint(show %1.%3#_#%2)
    -- if $lanetype(shape_1) =/= $lanetype(shape_2)
  | ...

syntax instr/ref hint(desc "reference instruction") = ...
  | REF.NULL heaptype
  | REF.IS_NULL
  | REF.AS_NON_NULL
  | REF.EQ
  | REF.TEST reftype
  | REF.CAST reftype
  | ...

syntax instr/func hint(desc "function reference instruction") = ...
  | REF.FUNC funcidx
  | ...

syntax instr/i31 hint(desc "scalar reference instruction") = ...
  | REF.I31
  | I31.GET sx                      hint(show I31.GET#_#%)
  | ...

syntax instr/struct hint(desc "structure reference instruction") = ...
  | STRUCT.NEW typeidx
  | STRUCT.NEW_DEFAULT typeidx
  | STRUCT.GET sx? typeidx u32      hint(show STRUCT.GET#_#% % %)
  | STRUCT.SET typeidx u32
  | ...

syntax instr/array hint(desc "array reference instruction") = ...
  | ARRAY.NEW typeidx
  | ARRAY.NEW_DEFAULT typeidx
  | ARRAY.NEW_FIXED typeidx u32
  | ARRAY.NEW_DATA typeidx dataidx
  | ARRAY.NEW_ELEM typeidx elemidx
  | ARRAY.GET sx? typeidx           hint(show ARRAY.GET#_#% %)
  | ARRAY.SET typeidx
  | ARRAY.LEN
  | ARRAY.FILL typeidx
  | ARRAY.COPY typeidx typeidx
  | ARRAY.INIT_DATA typeidx dataidx
  | ARRAY.INIT_ELEM typeidx elemidx
  | ...

syntax instr/stack hint(desc "stack reference instruction") = ...
  | STACK.NEW typeidx funcidx
  | STACK.NEW_REF typeidx typeuse
  | STACK.NEW_SWITCH typeidx funcidx
  | STACK.NEW_SWITCH_REF typeidx typeuse
  | STACK.SWITCH typeidx
  | STACK.SWITCH_RETIRE typeidx
  | ...

syntax instr/extern hint(desc "external reference instruction") = ...
  | EXTERN.CONVERT_ANY
  | ANY.CONVERT_EXTERN
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | ...

syntax instr/global hint(desc "global instruction") = ...
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | ...

syntax instr/table hint(desc "table instruction") = ...
  | TABLE.GET tableidx
  | TABLE.SET tableidx
  | TABLE.SIZE tableidx
  | TABLE.GROW tableidx
  | TABLE.FILL tableidx
  | TABLE.COPY tableidx tableidx
  | TABLE.INIT tableidx elemidx
  | ...

syntax instr/elem hint(desc "element instruction") = ...
  | ELEM.DROP elemidx
  | ...

syntax packsize hint(desc "pack size") = `8 | `16 | `32 | `64
syntax ww hint(show w) = packsize

syntax instr/memory hint(desc "memory instruction") = ...
  | LOAD numtype (ww _ sx)? memidx memop  hint(show %.LOAD % %)    hint(show %.LOAD#% % %)
    -- (if numtype = inn /\ ww < $size(inn))?  ;; TODO: take size implicitly
  | STORE numtype ww? memidx memop        hint(show %.STORE % %)   hint(show %.STORE#% % %)
    -- (if numtype = inn /\ ww < $size(inn))?  ;; TODO: take size implicitly
  | VLOAD vloadop? memidx memop           hint(show V128.LOAD % %) hint(show V128.LOAD#% % %)
  | VLOAD_LANE ww memidx memop laneidx    hint(show V128.LOAD#%#_#LANE % % %)
  | VSTORE memidx memop                   hint(show V128.STORE % %)
  | VSTORE_LANE ww memidx memop laneidx   hint(show V128.STORE#%#_#LANE % % %)
  | MEMORY.SIZE memidx
  | MEMORY.GROW memidx
  | MEMORY.FILL memidx
  | MEMORY.COPY memidx memidx
  | MEMORY.INIT memidx dataidx
  | ...

syntax instr/data hint(desc "data instruction") = ...
  | DATA.DROP dataidx


syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;;
;; Modules
;;

syntax elemmode = ACTIVE tableidx expr | PASSIVE | DECLARE
syntax datamode = ACTIVE memidx expr | PASSIVE

syntax type hint(desc "type definition") =
  TYPE rectype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax table hint(desc "table") =
  TABLE tabletype expr
syntax mem hint(desc "memory") =
  MEMORY memtype
syntax elem hint(desc "table segment") =
  ELEM reftype expr* elemmode
syntax data hint(desc "memory segment") =
  DATA byte* datamode
syntax start hint(desc "start function") =
  START funcidx

syntax externidx hint(desc "external index") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx
syntax export hint(desc "export") =
  EXPORT name externidx
syntax import hint(desc "import") =
  IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* elem* data* start* export*


var ty : type
var loc : local
var glob : global
var tab : table
var im : import
var ex : export
var ux : externidx
