;;
;; Auxiliary definitions on Types
;;

;; Instantiation

def $inst_reftype(moduleinst, reftype) : reftype  hint(show $inst_(%,%))

def $inst_reftype(mm, rt) = $subst_all_reftype(rt, dt*)
  -- if dt* = mm.TYPES


;;
;; Auxiliary definitions on Values
;;

;; Default values

def $default_(valtype) : val?

def $default_(I32) = (CONST I32 0)
def $default_(I64) = (CONST I64 0)
def $default_(F32) = (CONST F32 $fzero(32))
def $default_(F64) = (CONST F64 $fzero(64))
def $default_(V128) = (VCONST V128 0)
def $default_(REF NULL ht) = (REF.NULL ht)
def $default_(REF eps ht) = eps


;; Packed fields

def $packfield(storagetype, val) : fieldval         hint(show $pack_(%,%))
def $unpackfield(storagetype, sx?, fieldval) : val  hint(show $unpack_(%)^(%)#((%)))

def $packfield(t, val) = val
def $packfield(pt, CONST I32 i) = PACK pt $wrap(32, $psize(pt), i)

def $unpackfield(t, eps, val) = val
def $unpackfield(pt, sx, PACK pt i) = CONST I32 $ext($psize(pt), 32, sx, i)


;; Projections

def $funcsxv(externval*) : funcaddr*     hint(show $funcs(%))
def $globalsxv(externval*) : globaladdr* hint(show $globals(%))
def $tablesxv(externval*) : tableaddr*   hint(show $tables(%))
def $memsxv(externval*) : memaddr*       hint(show $mems(%))

def $funcsxv(eps) = eps
def $funcsxv((FUNC fa) xv*) = fa $funcsxv(xv*)
def $funcsxv(externval xv*) = $funcsxv(xv*)  -- otherwise

def $globalsxv(eps) = eps
def $globalsxv((GLOBAL ga) xv*) = ga $globalsxv(xv*)
def $globalsxv(externval xv*) = $globalsxv(xv*)  -- otherwise

def $tablesxv(eps) = eps
def $tablesxv((TABLE ta) xv*) = ta $tablesxv(xv*)
def $tablesxv(externval xv*) = $tablesxv(xv*)  -- otherwise

def $memsxv(eps) = eps
def $memsxv((MEM ma) xv*) = ma $memsxv(xv*)
def $memsxv(externval xv*) = $memsxv(xv*)  -- otherwise


;;
;; Auxiliary definitions on State
;;

;; Short-hands

def $store(state) : store             hint(show %.STORE)
def $frame(state) : frame             hint(show %.FRAME)

def $store((s; f)) = s
def $frame((s; f)) = f


def $funcaddr(state) : funcaddr*      hint(show %.MODULE.FUNCS)
def $funcaddr((s; f)) = f.MODULE.FUNCS

def $funcinst(state) : funcinst*      hint(show %.FUNCS)
def $globalinst(state) : globalinst*  hint(show %.GLOBALS)
def $tableinst(state) : tableinst*    hint(show %.TABLES)
def $meminst(state) : meminst*        hint(show %.MEMS)
def $eleminst(state) : eleminst*      hint(show %.ELEMS)
def $datainst(state) : datainst*      hint(show %.DATAS)
def $structinst(state) : structinst*  hint(show %.STRUCTS)
def $arrayinst(state) : arrayinst*    hint(show %.ARRAYS)
def $stackinst(state) : stackinst*    hint(show %.STACKS)
def $moduleinst(state) : moduleinst   hint(show %.MODULE)

def $funcinst((s; f)) = s.FUNCS
def $globalinst((s; f)) = s.GLOBALS
def $tableinst((s; f)) = s.TABLES
def $meminst((s; f)) = s.MEMS
def $eleminst((s; f)) = s.ELEMS
def $datainst((s; f)) = s.DATAS
def $structinst((s; f)) = s.STRUCTS
def $arrayinst((s; f)) = s.ARRAYS
def $stackinst((s; f)) = s.STACKS
def $moduleinst((s; f)) = f.MODULE

def $type(state, typeidx) : deftype         hint(show %.TYPES[%])
def $func(state, funcidx) : funcinst        hint(show %.FUNCS[%])
def $global(state, globalidx) : globalinst  hint(show %.GLOBALS[%])
def $table(state, tableidx) : tableinst     hint(show %.TABLES[%])
def $mem(state, memidx) : meminst           hint(show %.MEMS[%])
def $elem(state, tableidx) : eleminst       hint(show %.ELEMS[%])
def $data(state, dataidx) : datainst        hint(show %.DATAS[%])
def $local(state, localidx) : val?          hint(show %.LOCALS[%])

def $type((s; f), x) = f.MODULE.TYPES[x]
def $func((s; f), x) = s.FUNCS[f.MODULE.FUNCS[x]]
def $global((s; f), x) = s.GLOBALS[f.MODULE.GLOBALS[x]]
def $table((s; f), x) = s.TABLES[f.MODULE.TABLES[x]]
def $mem((s; f), x) = s.MEMS[f.MODULE.MEMS[x]]
def $elem((s; f), x) = s.ELEMS[f.MODULE.ELEMS[x]]
def $data((s; f), x) = s.DATAS[f.MODULE.DATAS[x]]
def $local((s; f), x) = f.LOCALS[x]


;; Update

def $with_local(state, localidx, val) : state               hint(show %[.LOCALS[%] = %])
def $with_global(state, globalidx, val) : state             hint(show %[.GLOBALS[%].VALUE = %])
def $with_table(state, tableidx, nat, ref) : state          hint(show %[.TABLES[%].REFS[%] = %])
def $with_tableinst(state, tableidx, tableinst) : state     hint(show %[.TABLES[%] = %])
def $with_mem(state, memidx, nat, nat, byte*) : state       hint(show %[.MEMS[%].BYTES[% : %] = %])
def $with_meminst(state, memidx, meminst) : state           hint(show %[.MEMS[%] = %])
def $with_elem(state, elemidx, ref*) : state                hint(show %[.ELEMS[%].REFS = %])
def $with_data(state, dataidx, byte*) : state               hint(show %[.DATAS[%].BYTES = %])
def $with_struct(state, structaddr, nat, fieldval) : state  hint(show %[.STRUCTS[%].FIELDS[%] = %])
def $with_array(state, arrayaddr, nat, fieldval) : state    hint(show %[.ARRAYS[%].FIELDS[%] = %])

def $with_local((s; f), x, v) = s; f[.LOCALS[x] = v]
def $with_global((s; f), x, v) = s[.GLOBALS[f.MODULE.GLOBALS[x]].VALUE = v]; f
def $with_table((s; f), x, i, r) = s[.TABLES[f.MODULE.TABLES[x]].REFS[i] = r]; f
def $with_tableinst((s; f), x, ti) = s[.TABLES[f.MODULE.TABLES[x]] = ti]; f
def $with_mem((s; f), x, i, j, b*) = s[.MEMS[f.MODULE.MEMS[x]].BYTES[i : j] = b*]; f
def $with_meminst((s; f), x, mi) = s[.MEMS[f.MODULE.MEMS[x]] = mi]; f
def $with_elem((s; f), x, r*) = s[.ELEMS[f.MODULE.ELEMS[x]].REFS = r*]; f
def $with_data((s; f), x, b*) = s[.DATAS[f.MODULE.DATAS[x]].BYTES = b*]; f
def $with_struct((s; f), a, i, fv) = s[.STRUCTS[a].FIELDS[i] = fv]; f
def $with_array((s; f), a, i, fv) = s[.ARRAYS[a].FIELDS[i] = fv]; f

def $ext_structinst(state, structinst*) : state  hint(show %[.STRUCTS =.. %])
def $ext_arrayinst(state, arrayinst*) : state    hint(show %[.ARRAYS =.. %])
def $ext_stackinst(state, stackinst*) : state    hint(show %[.STACKS =.. %])

def $ext_structinst((s; f), si*) = s[.STRUCTS =.. si*]; f
def $ext_arrayinst((s; f), ai*) = s[.ARRAYS =.. ai*]; f
def $ext_stackinst((s; f), ci*) = s[.STACKS =.. ci*]; f


;; Growing

def $growtable(tableinst, nat, ref) : tableinst hint(partial)
def $growmemory(meminst, nat) : meminst         hint(partial)

def $growtable(ti, n, r) = ti'
  -- if ti = { TYPE (`[i .. j] rt), REFS r'* }
  -- if i' = $(|r'*| + n)
  -- if ti' = { TYPE (`[i' .. j] rt), REFS r'* r^n }
  -- if $(i' <= j)

def $growmemory(mi, n) = mi'
  -- if mi = { TYPE (`[i .. j] I8), BYTES b* }
  -- if i' = $(|b*| / (64 * $Ki) + n)
  -- if mi' = { TYPE (`[i' .. j] I8), BYTES b* 0^(n * $($(64 * $Ki))) }
  -- if $(i' <= j)
